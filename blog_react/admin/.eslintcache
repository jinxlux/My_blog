[{"/Users/owner/Desktop/blog_react/admin/src/App.js":"1","/Users/owner/Desktop/blog_react/admin/src/pages/Login.js":"2","/Users/owner/Desktop/blog_react/admin/src/pages/Main.js":"3","/Users/owner/Desktop/blog_react/admin/src/index.js":"4","/Users/owner/Desktop/blog_react/admin/src/pages/AdminIndex.js":"5","/Users/owner/Desktop/blog_react/admin/src/pages/AddArticle.js":"6","/Users/owner/Desktop/blog_react/admin/src/config/apiUrl.js":"7","/Users/owner/Desktop/blog_react/admin/src/pages/ArticleList.js":"8"},{"size":229,"mtime":1610474923884,"results":"9","hashOfConfig":"10"},{"size":2704,"mtime":1610583879689,"results":"11","hashOfConfig":"10"},{"size":380,"mtime":1610638643199,"results":"12","hashOfConfig":"10"},{"size":207,"mtime":1610475888220,"results":"13","hashOfConfig":"10"},{"size":2878,"mtime":1610645356844,"results":"14","hashOfConfig":"10"},{"size":9541,"mtime":1610651744440,"results":"15","hashOfConfig":"10"},{"size":533,"mtime":1610643142787,"results":"16","hashOfConfig":"10"},{"size":3323,"mtime":1610644692971,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1h7ew9n",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/owner/Desktop/blog_react/admin/src/App.js",["38"],"/Users/owner/Desktop/blog_react/admin/src/pages/Login.js",["39"],"import React , {useState} from 'react';\nimport 'antd/dist/antd.css';\nimport { Card, Input, Button, Spin, message } from 'antd';\nimport { LoginOutlined, KeyOutlined} from '@ant-design/icons';\nimport '../static/css/Login.css';\nimport axios from 'axios';\nimport servicePath from '../config/apiUrl';\n\nfunction Login(props){\n\n    const [userName , setUserName] = useState('')\n    const [password , setPassword] = useState('')\n    const [isLoading, setIsLoading] = useState(false)\n\n    const checkLogin=()=>{\n        setIsLoading(true);\n        if(!userName){\n            message.error(\"User name cannot be empty\")\n            setTimeout(()=>{\n                setIsLoading(false)\n            },500)\n            return false\n        }else if(!password){\n            message.error(\"password cannot be empty\")\n            setTimeout(()=>{\n                setIsLoading(false)\n            },500)\n            return false\n        }\n        let userSet = {\n            'userName':userName,\n            'password':password\n        }\n\n        axios({\n            method:'post',\n            url:servicePath.checkLogin,\n            data:userSet,\n            withCredentials: true,\n        }).then(\n           res=>{\n                setIsLoading(false)\n                if(res.data.data=='successful'){\n                    localStorage.setItem('openId',res.data.openId)\n                    props.history.push('/index')\n                }else{\n                    message.error('Fail: Check password or user name')\n                }\n           }\n        )\n\n        setTimeout(()=>{\n            setIsLoading(false)\n        },1000)\n    }\n\n    return (\n        <div className=\"login-div\">\n            <Spin tip=\"Loading...\" spinning={isLoading}>\n                <Card className=\"login-card\" title=\"Xudong's Blog Background System\" bordered={true} style={{width:400}}>\n                    <Input\n                        id=\"userName\"\n                        size=\"large\"\n                        placeholder=\"UserName:\"\n                        prefix={<LoginOutlined />}\n                        onChange={(e)=>{setUserName(e.target.value)}}\n                    />\n                    <br/><br/>\n                    <Input.Password\n                        id=\"password\"\n                        size=\"large\"\n                        placeholder=\"Password:\"\n                        prefix={<KeyOutlined />}\n                        onChange={(e)=>{setPassword(e.target.value)}}\n                    />\n                </Card>\n                <br/>\n                <Button className=\"login-button\" type=\"primary\" size=\"large\" block onClick={checkLogin} > Login in </Button>\n            </Spin>\n        </div>\n    )\n}\nexport default Login",["40","41"],"/Users/owner/Desktop/blog_react/admin/src/pages/Main.js",[],["42","43"],"/Users/owner/Desktop/blog_react/admin/src/index.js",[],"/Users/owner/Desktop/blog_react/admin/src/pages/AdminIndex.js",["44","45","46","47"],"/Users/owner/Desktop/blog_react/admin/src/pages/AddArticle.js",["48","49","50","51","52"],"import React,{useState, useEffect} from 'react';\nimport marked from 'marked'\nimport '../static/css/AddArticle.css'\nimport { Row, Col ,Input, Select ,Button ,DatePicker, message} from 'antd'\nimport axios from \"axios\"\nimport servicePath from '../config/apiUrl'\n\nconst { Option } = Select\nconst { TextArea } = Input\n\n\nfunction AddArticle(props){\n    const [articleId,setArticleId] = useState(0)  // 0-new article;  otherwise, updated article\n    const [articleTitle,setArticleTitle] = useState('')   //title\n    const [articleContent , setArticleContent] = useState('')  //markdown content\n    const [markdownContent, setMarkdownContent] = useState('Preview') //html content\n    const [introducemd,setIntroducemd] = useState()            //intro markdown content\n    const [introducehtml,setIntroducehtml] = useState('Preview') //intro html content\n    const [showDate,setShowDate] = useState()   //published date\n    const [updateDate,setUpdateDate] = useState() //changed date\n    const [typeInfo ,setTypeInfo] = useState([]) // all type info\n    const [selectedType,setSelectType] = useState(1) //selected type\n\n    useEffect(()=>{\n        getTypeInfo()\n        let tmpId = props.match.params.id\n        if(tmpId){\n            setArticleId(tmpId)\n            getArticleById(tmpId)\n        } \n    },[])\n\n\n    marked.setOptions({\n        renderer: marked.Renderer(),\n        gfm: true,\n        pedantic: false,\n        sanitize: false,\n        tables: true,\n        breaks: false,\n        smartLists: true,\n        smartypants: false,\n      });\n    \n    /**\n     * show the markdown rendering of content entering\n     */\n    const changeContent = (e)=>{\n        setArticleContent(e.target.value)\n        let html=marked(e.target.value)\n        setMarkdownContent(html)\n    }\n\n     /**\n     * show the markdown rendering of introduce entering\n     */\n    const changeIntroduce = (e)=>{\n        setIntroducemd(e.target.value)\n        let html=marked(e.target.value)\n        setIntroducehtml(html)\n     }\n\n     /**\n      * get all types of articles have\n      */\n    const getTypeInfo =()=>{\n\n        axios({\n            method:'get',\n            url:servicePath.getTypeInfo,\n            header:{ 'Access-Control-Allow-Origin':'*' },\n            withCredentials: true\n        }).then(\n           res=>{\n               if(res.data.data==\"noLog\"){\n                 localStorage.removeItem('openId')\n                 props.history.push('/login')  \n               }else{\n                setTypeInfo(res.data.data)\n               }\n\n            }\n        )\n    }\n\n    /**\n     * active when a type select\n     */\n    const selectTypeHandler =(value)=>{\n        setSelectType(value)\n    }\n\n    /**\n     * save article to server\n     */\n    const publishArticle = ()=>{\n        if(!selectedType){\n            message.error('Must have a type')\n            return false\n        }else if(!articleTitle){\n            message.error('Must have a title')\n            return false\n        }else if(!articleContent){\n            message.error('No content')\n            return false\n        }else if(!introducemd){\n            message.error('No intro')\n            return false\n        }else if(!showDate){\n            message.error('No date')\n            return false\n        }\n        let dataProps={}   //data in request body send to datanase\n        dataProps.type_id = selectedType \n        dataProps.title = articleTitle\n        dataProps.article_content =articleContent\n        dataProps.introduce =introducemd\n        let datetext= showDate.replace('-','/')\n        dataProps.addTime =(new Date(datetext).getTime())/1000\n\n\n        if(articleId==0){\n            console.log('articleId=:'+articleId)\n            dataProps.view_count = 0\n            axios({\n                method:'post',\n                url:servicePath.addArticle,\n                data:dataProps,\n                withCredentials: true\n            }).then(\n                res=>{\n                    setArticleId(res.data.insertId)\n                    if(res.data.isScuccess){\n                        message.success('Upload Successfully!')\n                    }else{\n                        message.error('Error!');\n                    }\n\n                }\n            )\n        }\n        else{\n            dataProps.id = articleId \n            axios({\n                method:'post', // update-better; post for easy orgainze\n                url:servicePath.updateArticle,\n                header:{ 'Access-Control-Allow-Origin':'*' },\n                data:dataProps,\n                withCredentials: true\n            }).then(\n                res=>{\n                    if(res.data.isScuccess){\n                        message.success('Update Successfully!')\n                    }else{\n                        message.error('Error');\n                    }\n                }\n            )\n        }\n    }\n\n    const getArticleById = (id)=>{\n        axios(servicePath.getArticleById+id,{ \n            withCredentials: true,\n            header:{ 'Access-Control-Allow-Origin':'*' }\n        }).then(\n            res=>{\n                setArticleTitle(res.data.data[0].title)\n                setArticleContent(res.data.data[0].article_content)\n                let html=marked(res.data.data[0].article_content)\n                setMarkdownContent(html)\n                setIntroducemd(res.data.data[0].introduce)\n                let tmpInt = marked(res.data.data[0].introduce)\n                setIntroducehtml(tmpInt)\n                setShowDate(res.data.data[0].addTime)\n                setSelectType(res.data.data[0].typeId)\n            }\n        )\n    } \n\n    return (\n        <div>\n            <Row gutter={15}>\n                {/* left */}\n                <Col span={18}>\n                        <Row gutter={[15,15]} >\n                            <Col span={20}>\n                                <Input \n                                    value={articleTitle}\n                                    placeholder=\"Title\" \n                                    onChange={e=>{\n                                        setArticleTitle(e.target.value)\n                                    }}\n                                    size=\"large\" />\n                            </Col>\n                            <Col span={4}>\n                                {/* &nbsp; */}\n                                <Select defaultValue={selectedType} size=\"large\" onChange={selectTypeHandler}>\n                                    {\n                                        typeInfo.map((item,index)=>{\n                                            return (<Option key={index} value={item.id}>{item.typeName}</Option>)\n                                        })\n                                    }\n                                </Select>\n                            </Col>\n                        </Row>\n                        \n                        <Row gutter={[10,10]} >\n                            {/* place for writing content */}\n                            <Col span={12}>\n                                <TextArea \n                                    value={articleContent} \n                                    className=\"markdown-content\" \n                                    rows={35}  \n                                    placeholder=\"Content\"\n                                    onChange={changeContent}\n                                    onPressEnter={changeContent}\n                                    />\n                            </Col>\n                            {/* place for showing converted content */}\n                            <Col span={12}>\n                                <div \n                                    className=\"show-html\"\n                                    dangerouslySetInnerHTML = {{__html:markdownContent}} >\n                                </div>\n\n                            </Col>\n                        </Row>  \n\n                </Col>\n                {/* right */}\n                <Col span={6}>\n                    <Row gutter={[68,15]}>\n                        <Col span={10}>\n                        {/* <Button  size=\"large\">Save</Button> */}\n                        </Col>\n                        <Col span={6}>\n                        <Button  type=\"primary\" size=\"large\" onClick={publishArticle}>Published</Button>\n                        </Col>\n                        <Col span={24}>\n                            <TextArea \n                                rows={4} \n                                value={introducemd}  \n                                onChange={changeIntroduce} \n                                onPressEnter={changeIntroduce}\n                                placeholder=\"Introduce\"\n                            />\n                            <br/><br/>\n                            <div    className=\"introduce-html\"\n                                    dangerouslySetInnerHTML = {{__html:'intro：'+introducehtml}}>\n                            </div>\n                        </Col>\n                        <Col span={24}>\n                            <div className=\"date-select\">\n                                <DatePicker\n                                    onChange={(date,dateString)=>setShowDate(dateString)}\n                                    placeholder=\"Date\"\n                                    size=\"large\"  \n                                />\n                            </div>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </div>\n    )\n}\nexport default AddArticle\n\n","/Users/owner/Desktop/blog_react/admin/src/config/apiUrl.js",[],"/Users/owner/Desktop/blog_react/admin/src/pages/ArticleList.js",["53"],{"ruleId":"54","severity":1,"message":"55","line":2,"column":9,"nodeType":"56","messageId":"57","endLine":2,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":43,"column":33,"nodeType":"60","messageId":"61","endLine":43,"endColumn":35},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"54","severity":1,"message":"68","line":2,"column":24,"nodeType":"56","messageId":"57","endLine":2,"endColumn":34},{"ruleId":"54","severity":1,"message":"69","line":4,"column":27,"nodeType":"56","messageId":"57","endLine":4,"endColumn":42},{"ruleId":"54","severity":1,"message":"70","line":4,"column":58,"nodeType":"56","messageId":"57","endLine":4,"endColumn":70},{"ruleId":"58","severity":1,"message":"59","line":21,"column":16,"nodeType":"60","messageId":"61","endLine":21,"endColumn":18},{"ruleId":"54","severity":1,"message":"71","line":20,"column":12,"nodeType":"56","messageId":"57","endLine":20,"endColumn":22},{"ruleId":"54","severity":1,"message":"72","line":20,"column":23,"nodeType":"56","messageId":"57","endLine":20,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":31,"column":7,"nodeType":"75","endLine":31,"endColumn":9,"suggestions":"76"},{"ruleId":"58","severity":1,"message":"59","line":75,"column":32,"nodeType":"60","messageId":"61","endLine":75,"endColumn":34},{"ruleId":"58","severity":1,"message":"59","line":122,"column":21,"nodeType":"60","messageId":"61","endLine":122,"endColumn":23},{"ruleId":"54","severity":1,"message":"77","line":2,"column":50,"nodeType":"56","messageId":"57","endLine":2,"endColumn":56},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["78"],"no-negated-in-lhs",["79"],["78"],["79"],"'Breadcrumb' is defined but never used.","'DesktopOutlined' is defined but never used.","'FileOutlined' is defined but never used.","'updateDate' is assigned a value but never used.","'setUpdateDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTypeInfo' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["80"],"'Switch' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [getTypeInfo, props.match.params.id]",{"range":"83","text":"84"},[1298,1300],"[getTypeInfo, props.match.params.id]"]